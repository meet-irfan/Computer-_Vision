# -*- coding: utf-8 -*-
"""Feature Matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_roHTP09IYjbYyjIi2fKDEt-15vn2k_g
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the images
img1 = cv2.imread('/content/39052.jpg', cv2.IMREAD_GRAYSCALE)  # First image
img2 = cv2.imread('/content/36822.jpg', cv2.IMREAD_GRAYSCALE)  # Second image

# 1. Detect Keypoints and Descriptors using SIFT
sift = cv2.SIFT_create()
keypoints1, descriptors1 = sift.detectAndCompute(img1, None)
keypoints2, descriptors2 = sift.detectAndCompute(img2, None)

# 2. Brute-Force Matcher with KNN
bf = cv2.BFMatcher(cv2.NORM_L2, crossCheck=False)  # NORM_L2 is used for SIFT/ORB
matches = bf.knnMatch(descriptors1, descriptors2, k=2)

# 3. Apply Ratio Test (Lowe's Ratio Test) to filter good matches
good_matches = [m for m, n in matches if m.distance < 0.75 * n.distance]

# 4. Visualize the Matches
matched_img = cv2.drawMatchesKnn(img1, keypoints1, img2, keypoints2, [good_matches], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

plt.figure(figsize=(15, 10))
plt.imshow(matched_img)
plt.title(f"Feature Matching - {len(good_matches)} Good Matches")
plt.show()

# 5. FLANN-Based Matcher (for large datasets)
FLANN_INDEX_KDTREE = 1
index_params = dict(algorithm=FLANN_INDEX_KDTREE, trees=5)  # Parameters for KD-Tree
search_params = dict(checks=50)  # Number of checks in the search
flann = cv2.FlannBasedMatcher(index_params, search_params)

# Find Matches using FLANN
flann_matches = flann.knnMatch(descriptors1, descriptors2, k=2)

# Apply Lowe's Ratio Test to FLANN Matches
good_flann_matches = [m for m, n in flann_matches if m.distance < 0.75 * n.distance]

# Visualize FLANN Matches
flann_img = cv2.drawMatchesKnn(img1, keypoints1, img2, keypoints2, [good_flann_matches], None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)

plt.figure(figsize=(15, 10))
plt.imshow(flann_img)
plt.title(f"FLANN Feature Matching - {len(good_flann_matches)} Good Matches")
plt.show()